function thisYear(t,a){var e,i,o;for(i=document.getElementsByClassName("tabcontent"),e=0;e<i.length;e++)i[e].style.display="none";for(o=document.getElementsByClassName("tablinks"),e=0;e<o.length;e++)o[e].className=o[e].className.replace(" active","");document.getElementById(a).style.display="block",t.currentTarget.className+=" active"}function keysAccordion(){if($(window).width()<560){var t,a=document.getElementsByClassName("keys");for(t=0;t<a.length;t++)a[t].addEventListener("click",function(t){this.classList.toggle("active");for(var a=this.nextElementSibling;a&&a.classList.contains("hidden-buttons-keys");)a.classList.toggle("d-none"),a=a.nextElementSibling})}}var fd=[5,7,1,24,13,28,40,14,38,11,22,16,34,19,1,14,38,11,22],er=[38,11,22,16,34,19,1,14,5,7,1,24,13,28,40,14,5,7,1],time=["Mar 1",2,3,4,5,6,8,10,12,14,16,18,20,22,24,26,28,30];new Chart(document.getElementById("bar-chart-horizontal"),{type:"horizontalBar",data:{labels:["Foo"],datasets:[{label:"bad",data:[25],backgroundColor:"#9eaeff"},{label:"better",data:[10],backgroundColor:"rgba(255, 255, 255, 0.3)"}]},options:{plugins:{stacked100:{enable:!0}},legend:{display:!1},scales:{xAxes:[{display:!1}],yAxes:[{display:!1}]}}});var ctx=document.getElementById("myChart").getContext("2d"),gradientFd=ctx.createLinearGradient(0,0,0,250);gradientFd.addColorStop(0,"rgba(133, 93, 248, 0.9)"),gradientFd.addColorStop(1,"rgba(60, 45, 169, 0.9)");var gradientEr=ctx.createLinearGradient(0,0,0,250);gradientEr.addColorStop(0,"rgba(84, 240, 255, 0.9)"),gradientEr.addColorStop(1,"rgba(18, 125, 176, 0.9)");var ChartLineBig=new Chart(ctx,{type:"line",data:{labels:time,datasets:[{label:"Face detector",borderColor:gradientFd,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientFd,borderWidth:1,data:fd,lineTension:0},{label:"Emotion recognition",borderColor:gradientEr,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientEr,borderWidth:1,data:er,lineTension:0}]},options:{responsive:!0,tooltips:{mode:"index",backgroundColor:"rgba(30, 37, 73, 0.5)",titleFontFamily:"inherit",height:"100%",position:"nearest",bodyFontColor:"#a9b2e1",bodyFontSize:14,bodySpacing:30,xPadding:20,yPadding:25,cornerRadius:0,multiKeyBackground:"transparent",enabled:!0,intersect:!1},hover:{mode:"nearest",intersect:!0},maintainAspectRatio:!1,legend:{display:!1,position:"right",labels:{fontColor:"#54F0FF",fontSize:"14",lineHeight:"20px",usePointStyle:!0}},scales:{yAxes:[{ticks:{fontColor:"#6673B4",maxTicksLimit:5,padding:14},gridLines:{drawTicks:!0,lineWidth:1,color:"rgba(102, 115, 180, 0.2)"}}],xAxes:[{gridLines:{zeroLineColor:"#fff",display:!1},ticks:{padding:8,fontColor:"#6673B4"}}]}}});$(".chart-full .charts .right .icon-btn a").click(function(){var t,a=$(this).attr("data-fill");"true"===a&&(t=!0,$(this).attr("data-fill","false")),"false"===a&&(t=!1,$(this).attr("data-fill","true")),ChartLineBig.data.datasets[0].fill=t,ChartLineBig.data.datasets[1].fill=t,ChartLineBig.update()}),$(".chart-full .charts .right .tabs a").click(function(){var t=$(this).attr("data-time");$(".charts .right .tabs a").removeClass("active"),$(this).addClass("active"),"month"===t?time=["Mar 1",2,3,4,5,6,8,10,12,14,16,18,20,22,24,26,28,30]:"year"===t?time=["January","February","March","April","May","June","July","August","September","October","November","December"]:"ever"===t&&(time=[2015,2016,2017,2018,2019,2020]),ChartLineBig.data.labels=time,ChartLineBig.update()});var ctx1=$("#doughnut-chartcanvas-1"),data1={labels:["Face detector","Emotion recognition"],datasets:[{data:[85,15],backgroundColor:["#54f0ff","#855df8"],borderColor:["#54f0ff","#855df8"]}]},chart1=new Chart(ctx1,{type:"doughnut",data:data1,options:{responsive:!0,title:{display:!1},cutoutPercentage:98,legend:{display:!1},tooltips:!1}}),btx=document.getElementById("myChartMini").getContext("2d"),myChartMini=new Chart(btx,{type:"line",data:{labels:time,datasets:[{label:"Fd",borderColor:gradientFd,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientFd,borderWidth:1,data:fd,lineTension:0},{label:"Er",borderColor:gradientEr,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientEr,borderWidth:1,data:er,lineTension:0}]},options:{responsive:!0,maintainAspectRatio:!1,legend:{display:!1,position:"right",labels:{fontColor:"#54F0FF",fontSize:"14",lineHeight:"20"}},scales:{yAxes:[{ticks:{fontColor:"#6673B4",maxTicksLimit:5,padding:14,display:!1},gridLines:{drawTicks:!0,lineWidth:1,color:"rgba(102, 115, 180, 0.2)",display:!1}}],xAxes:[{gridLines:{zeroLineColor:"#fff",display:!1},ticks:{padding:8,fontColor:"#6673B4",display:!1}}]}}});$(".right-bar .mini-chart .tabs a[data-fill]").click(function(){var t,a=$(this).attr("data-fill");"true"===a&&(t=!0,$(this).attr("data-fill","false")),"false"===a&&(t=!1,$(this).attr("data-fill","true")),myChartMini.data.datasets[0].fill=t,myChartMini.data.datasets[1].fill=t,myChartMini.update()}),$(".right-bar .mini-chart .tabs a[data-time]").click(function(){var t=$(this).attr("data-time");"month"===t?(time=["January","February","March","April","May","June","July","August","September","October","November","December"],$(this).attr("data-time","year"),$(this).text("Year")):"year"===t?(time=[2015,2016,2017,2018,2019,2020],$(this).attr("data-time","ever"),$(this).text("Ever")):"ever"===t&&(time=["Mar 1",2,3,4,5,6,8,10,12,14,16,18,20,22,24,26,28,30],$(this).attr("data-time","month"),$(this).text("Month")),myChartMini.data.labels=time,myChartMini.update()}),$("[data-fancybox]").fancybox({touch:!1});var acc=document.getElementsByClassName("accordion"),i;for(i=0;i<acc.length;i++)acc[i].addEventListener("click",function(){this.classList.toggle("active");var t=this.nextElementSibling;"table-row"===t.style.display?t.style.display="none":t.style.display="table-row"});keysAccordion(),$(window).resize(function(){keysAccordion()}),$(window).scroll(function(){var t=$(this).scrollTop();t>90?$(".mobile-nav").addClass("active"):$(".mobile-nav").removeClass("active")}),$(".menu").on("touch click",function(){$("#menu").toggleClass("active_menu"),$(".topnav").toggleClass("active"),$("a.menu").toggleClass("active")});var ctx=document.getElementById("mobile-chart").getContext("2d"),myChartMobileMini=new Chart(ctx,{type:"line",data:{labels:time,datasets:[{label:"Face detector",borderColor:gradientFd,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientFd,borderWidth:1,data:fd,lineTension:0},{label:"Emotion recognition",borderColor:gradientEr,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientEr,borderWidth:1,data:er,lineTension:0}]},options:{responsive:!0,tooltips:!1,maintainAspectRatio:!1,legend:{display:!1},scales:{yAxes:[{ticks:{display:!1,beginAtZero:!0},gridLines:{display:!1,tickMarkLength:0}}],xAxes:[{gridLines:{display:!1,tickMarkLength:0},ticks:{display:!1,beginAtZero:!0}}]}}}),ctx=document.getElementById("graph-mobile").getContext("2d"),chartMobileFull=new Chart(ctx,{type:"line",data:{labels:time,datasets:[{label:"Face detector",borderColor:gradientFd,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientFd,borderWidth:3,data:fd,lineTension:0},{label:"Emotion recognition",borderColor:gradientEr,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientEr,borderWidth:3,data:er,lineTension:0}]},options:{responsive:!0,tooltips:{mode:"index",intersect:!1,backgroundColor:"rgba(30, 37, 73, 0.5)",titleFontFamily:"inherit",height:"100%",position:"nearest",bodyFontColor:"#a9b2e1",bodyFontSize:14,bodySpacing:30,xPadding:20,yPadding:25,cornerRadius:0,multiKeyBackground:"transparent",enabled:!0},hover:{mode:"nearest",intersect:!0},maintainAspectRatio:!1,legend:{display:!1,position:"right",labels:{fontColor:"#54F0FF",fontSize:"14",lineHeight:"20px",usePointStyle:!0}},scales:{yAxes:[{ticks:{fontColor:"#6673B4",maxTicksLimit:5,padding:14,display:!1,beginAtZero:!0},gridLines:{drawTicks:!0,lineWidth:1,color:"rgba(102, 115, 180, 0.2)"}}],xAxes:[{gridLines:{zeroLineColor:"#fff",display:!1},ticks:{padding:8,fontColor:"#6673B4",beginAtZero:!0}}]}}}),filling=!0;$("#full-width-mobile-chart .icon-btn a").click(function(){var t=$(this).attr("data-fill");"true"===t?(filling=!0,$(this).attr("data-fill","false")):"false"===t&&(filling=!1,$(this).attr("data-fill","true")),chartMobileFull.data.datasets[0].fill=filling,chartMobileFull.data.datasets[1].fill=filling,chartMobileFull.update()}),$(".tabs-chart > li > a").click(function(){var t=$(this).attr("data-time");$(".tabs-chart li").removeClass("active"),$(this).parent("li").addClass("active"),"month"===t?time=["Mar 1",2,3,4,5,6,8,10,12,14,16,18,20,22,24,26,28,30]:"year"===t?time=["January","February","March","April","May","June","July","August","September","October","November","December"]:"ever"===t&&(time=[2015,2016,2017,2018,2019,2020]),chartMobileFull.data.labels=time,chartMobileFull.update()}),$(".change_pass-btn").click(function(){$(".password").toggleClass("d-block")}),$(".dashboard-info .dashboard_left-bar .nav .list_item:nth-child(1)").hasClass("active")&&$(".dashboard-info .dashboard_left-bar").addClass("active"),$(function(){$(".hide-show").show(),$(".hide-show span").addClass("show"),$(".hide-show span").click(function(){$(this).hasClass("show")?($(this).text("Hide"),$(this).parent().siblings(".password").attr("type","text"),$(this).removeClass("show")):($(this).text("Show"),$(this).parent().siblings(".password").attr("type","password"),$(this).addClass("show"))}),$(".change > a").on("click",function(){$(".hide-show span").text("Show").addClass("show"),$(".hide-show").parent().find(".password").attr("type","password")})}),$(".btn-change-long-page").click(function(){$(".main-info").toggleClass("long-page"),$(".dashboard_left-bar").toggleClass("long-page"),$("#dashboard").toggleClass("long-page"),$("#keys").toggleClass("long-page"),$("#users").toggleClass("long-page"),$("#payments").toggleClass("long-page"),$("#settings").toggleClass("long-page"),$(this).toggleClass("collapsed"),$("#chart-full").toggleClass("d-none"),$(".mini-chart").removeClass("d-none")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
