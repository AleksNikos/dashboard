function summ_data(t){var a=0;for(var e in t)a+=t[e];return a}function stacked_data(t,a){var e=[];for(var i in a)e.push(a[i]+t[i]);return e}function legend_draw(){var t=ChartLineBig.getDatasetMeta(0).data[ChartLineBig.getDatasetMeta(0).data.length-1],a=ChartLineBig.getDatasetMeta(1).data[ChartLineBig.getDatasetMeta(1).data.length-1];$("#er_legend").css("top",t._model.y+"px"),$("#fd_legend").css("top",a._model.y+"px"),chartMobileFull&&(t=chartMobileFull.getDatasetMeta(0).data[chartMobileFull.getDatasetMeta(0).data.length-1],a=chartMobileFull.getDatasetMeta(1).data[chartMobileFull.getDatasetMeta(1).data.length-1],$("#er_legend_mobile").css("top",t._model.y-30+"px"),$("#fd_legend_mobile").css("top",a._model.y-30+"px"),mobile_all_compute())}function mobile_all_compute(){var t=er[compute_data.length-1],a=compute_data[compute_data.length-1],e=er[0],i=compute_data[0],o=a-i,n=t-e,l=summ_data(compute_data),s=summ_data(er),r=l+s;draw_mobile(!1,o,n,l,s,r)}function draw_mobile(t,a,e,i,o,n){var l,s="Mar";t!==!1?(l=time[t._index],s="Mar"):(l="All",s="All");var r="2019",d="Daily";12==time.length&&(s=l,r="2019",d="Year"),time.length<11&&(s="All",r=l,"All"==l&&(r=""),d="Ever"),$(".month").html(s),$(".year").html(r),$(".show").html(d),$("#mobile_times_total").html(n);var c="&uarr",p="#B8E986";a<0&&(c="&darr",p="#FF729A"),$("#mobile_fd").html(i+'&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:'+p+';">'+a+"&nbsp;&nbsp;"+c+";</span>"),c="&uarr",p="#B8E986",e<0&&(c="&darr",p="#FF729A"),$("#mobile_er").html(o+'&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:'+p+';">'+e+"&nbsp;&nbsp;"+c+";</span>")}function thisYear(t,a){var e,i,o;for(i=document.getElementsByClassName("tabcontent"),e=0;e<i.length;e++)i[e].style.display="none";for(o=document.getElementsByClassName("tablinks"),e=0;e<o.length;e++)o[e].className=o[e].className.replace(" active","");document.getElementById(a).style.display="block",t.currentTarget.className+=" active"}function keysAccordion(){if($(window).width()<560){var t,a=document.getElementsByClassName("keys");for(t=0;t<a.length;t++)a[t].addEventListener("click",function(t){this.classList.toggle("active");for(var a=this.nextElementSibling;a&&a.classList.contains("hidden-buttons-keys");)a.classList.toggle("d-none"),a=a.nextElementSibling})}}var fd=[5,7,1,24,13,28,40,14,38,11,22,16,34,19,1,14,38,21],er=[38,11,22,16,34,19,1,14,5,7,1,24,13,28,40,14,5,14],time=["Mar 1",2,3,4,5,6,8,10,12,14,16,18,20,22,24,26,28,30],compute_data=stacked_data(fd,er);new Chart(document.getElementById("bar-chart-horizontal"),{type:"horizontalBar",data:{labels:["Foo"],datasets:[{label:"bad",data:[25],backgroundColor:"#9eaeff"},{label:"better",data:[10],backgroundColor:"rgba(255, 255, 255, 0.3)"}]},options:{plugins:{stacked100:{enable:!0}},legend:{display:!1},scales:{xAxes:[{display:!1}],yAxes:[{display:!1}]}}});var ctx=document.getElementById("myChart").getContext("2d"),gradientFd=ctx.createLinearGradient(0,0,0,250);gradientFd.addColorStop(0,"rgba(133, 93, 248, 0.9)"),gradientFd.addColorStop(1,"rgba(60, 45, 169, 0.9)");var gradientEr=ctx.createLinearGradient(0,0,0,250);gradientEr.addColorStop(0,"rgba(84, 240, 255, 0.9)"),gradientEr.addColorStop(1,"rgba(18, 125, 176, 0.9)");var ChartLineBig=new Chart(ctx,{type:"line",data:{labels:time,datasets:[{label:"Emotion recognition",borderColor:gradientEr,pointRadius:100,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientEr,borderWidth:1,data:er,lineTension:0},{label:"Face detector",borderColor:gradientFd,pointRadius:50,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientFd,borderWidth:1,data:compute_data,lineTension:0}]},options:{responsive:!0,events:["click"],tooltips:{mode:"index",backgroundColor:"rgba(30, 37, 73, 0.5)",titleFontFamily:"inherit",height:"100%",position:"nearest",bodyFontColor:"#a9b2e1",bodyFontSize:14,bodySpacing:30,xPadding:20,yPadding:25,cornerRadius:0,multiKeyBackground:"transparent",enabled:!1,intersect:!0},hover:{mode:"nearest",intersect:!0},maintainAspectRatio:!1,legend:{display:!1,position:"right",labels:{fontColor:"#54F0FF",fontSize:"14",lineHeight:"20px",usePointStyle:!0}},scales:{yAxes:[{ticks:{fontColor:"#6673B4",maxTicksLimit:5,padding:14},gridLines:{drawTicks:!0,lineWidth:1,color:"rgba(102, 115, 180, 0.2)"}}],xAxes:[{gridLines:{zeroLineColor:"#fff",display:!1},ticks:{padding:8,fontColor:"#6673B4"}}]}}});$("#myChart").mouseleave(function(){$("#black_tooltip").css("display","none"),$("#special_tooltip").css("display","none"),$("#black_tooltip_right").css("display","none")}),legend_draw(),$("#graph-mobile").mouseleave(function(){$("#black_tooltip_mobile").css("display","none"),$("#black_tooltip_right_mobile").css("display","none"),mobile_all_compute()}),$("#graph-mobile").bind("mousemove",function(t){var a,e=chartMobileFull.getDatasetMeta(0),i=100;e.data.forEach(function(e){if(Math.abs(e._model.x-t.pageX)<i&&(a=e,i=Math.abs(e._model.x-t.pageX)),a&&a._index>0){$("#black_tooltip_mobile").css("display","block"),$("#black_tooltip_right_mobile").css("display","block");var o=chartMobileFull.getDatasetMeta(0).data[a._index-1];$("#black_tooltip_mobile").css("width",o._model.x-40+"px"),$("#black_tooltip_right_mobile").css("width",$("#graph-mobile").width()-a._model.x-10+"px");var n=compute_data[a._index]-compute_data[o._index],l=er[a._index]-er[o._index],s=compute_data[a._index]+er[a._index];draw_mobile(a,n,l,compute_data[a._index],er[a._index],s)}})}),$("#myChart").bind("mousemove",function(t){var a,e=ChartLineBig.getDatasetMeta(0),i=100;if(e.data.forEach(function(e){Math.abs(e._model.x-t.pageX+40)<i&&(a=e,i=Math.abs(e._model.x-t.pageX+40))}),a&&a._index>0){var o=ChartLineBig.getDatasetMeta(0).data[a._index-1],n=compute_data[a._index]-compute_data[o._index],l=er[a._index]-er[o._index],s=er[a._index]+compute_data[a._index];$("#all_tip").html(s);var r="&uarr",d="#B8E986";n<0&&(r="&darr",d="#FF729A"),$("#fd_tip").html(compute_data[a._index]+'&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:'+d+';">'+n+"&nbsp;&nbsp;"+r+";</span>"),r="&uarr",d="#B8E986",l<0&&(r="&darr",d="#FF729A"),$("#er_tip").html(er[a._index]+'&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:'+d+';">'+l+"&nbsp;&nbsp;"+r+";</span>"),$("#black_tooltip").css("display","block"),$("#special_tooltip").css("display","block"),$("#black_tooltip_right").css("display","block"),$("#black_tooltip").css("width",o._model.x-40+"px"),a._model.x+190>$("#myChart").width()?($("#special_tooltip").css("left",o._model.x-190+"px"),$("#black_tooltip").css("width",o._model.x-40-190+"px"),$("#black_tooltip_right").css("width",$("#myChart").width()-a._model.x-10+"px")):($("#special_tooltip").css("left",a._model.x+"px"),$("#black_tooltip_right").css("width",$("#myChart").width()-a._model.x-10-190+"px"))}}),$(".chart-full .charts .right .icon-btn a").click(function(){var t,a=$(this).attr("data-fill");"true"===a&&(t=!0,compute_data=stacked_data(fd,er),$(this).attr("data-fill","false")),"false"===a&&(t=!1,compute_data=fd,$(this).attr("data-fill","true")),ChartLineBig.data.datasets[1].data=compute_data,ChartLineBig.data.datasets[0].fill=t,ChartLineBig.data.datasets[1].fill=t,ChartLineBig.update(),legend_draw()}),$(".chart-full .charts .right .tabs a").click(function(){var t=$(this).attr("data-time");$(".charts .right .tabs a").removeClass("active"),$(this).addClass("active"),"month"===t?(fd=[5,7,1,24,13,28,40,14,38,11,22,16,34,19,1,14,38,21],er=[38,11,22,16,34,19,1,14,5,7,1,24,13,28,40,14,5,14],time=["Mar 1",2,3,4,5,6,8,10,12,14,16,18,20,22,24,26,28,30]):"year"===t?(fd=[5,7,1,24,13,28,40,14,38,11,22,16],er=[38,11,22,16,34,19,1,14,5,7,1,24],time=["January","February","March","April","May","June","July","August","September","October","November","December"]):"ever"===t&&(fd=[5,7,1,24,13,28],er=[38,11,22,16,34,19],time=[2015,2016,2017,2018,2019,2020]),compute_data=stacked_data(fd,er),ChartLineBig.data.datasets[1].data=compute_data,ChartLineBig.data.datasets[0].data=er,ChartLineBig.data.labels=time,ChartLineBig.update(),legend_draw()});var ctx1=$("#doughnut-chartcanvas-1"),data1={labels:["Face detector","Emotion recognition"],datasets:[{data:[85,15],backgroundColor:["#54f0ff","#855df8"],borderColor:["#54f0ff","#855df8"]}]},chart1=new Chart(ctx1,{type:"doughnut",data:data1,options:{responsive:!0,title:{display:!1},cutoutPercentage:98,legend:{display:!1},tooltips:!1}}),btx=document.getElementById("myChartMini").getContext("2d"),myChartMini=new Chart(btx,{type:"line",data:{labels:time,datasets:[{label:"Er",borderColor:gradientEr,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientEr,borderWidth:1,data:er,lineTension:0},{label:"Fd",borderColor:gradientFd,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientFd,borderWidth:1,data:compute_data,lineTension:0}]},options:{responsive:!0,maintainAspectRatio:!1,legend:{display:!1,position:"right",labels:{fontColor:"#54F0FF",fontSize:"14",lineHeight:"20"}},scales:{yAxes:[{ticks:{fontColor:"#6673B4",maxTicksLimit:5,padding:14,display:!1},gridLines:{drawTicks:!0,lineWidth:1,color:"rgba(102, 115, 180, 0.2)",display:!1}}],xAxes:[{gridLines:{zeroLineColor:"#fff",display:!1},ticks:{padding:8,fontColor:"#6673B4",display:!1}}]}}});$(".right-bar .mini-chart .tabs a[data-fill]").click(function(){var t,a=$(this).attr("data-fill");"true"===a&&(t=!0,$(this).attr("data-fill","false")),"false"===a&&(t=!1,$(this).attr("data-fill","true")),myChartMini.data.datasets[0].fill=t,myChartMini.data.datasets[1].fill=t,myChartMini.update()}),$(".right-bar .mini-chart .tabs a[data-time]").click(function(){var t=$(this).attr("data-time");$(this).attr("data-time","month"),$(this).html("Month"),"month"===t&&($(this).attr("data-time","year"),$(this).html("Year")),"year"===t&&($(this).attr("data-time","ever"),$(this).html("Ever")),t=$(this).attr("data-time"),"month"===t?(fd=[5,7,1,24,13,28,40,14,38,11,22,16,34,19,1,14,38,21],er=[38,11,22,16,34,19,1,14,5,7,1,24,13,28,40,14,5,14],time=["Mar 1",2,3,4,5,6,8,10,12,14,16,18,20,22,24,26,28,30]):"year"===t?(fd=[5,7,1,24,13,28,40,14,38,11,22,16],er=[38,11,22,16,34,19,1,14,5,7,1,24],time=["January","February","March","April","May","June","July","August","September","October","November","December"]):"ever"===t&&(fd=[5,7,1,24,13,28],er=[38,11,22,16,34,19],time=[2015,2016,2017,2018,2019,2020]),compute_data=stacked_data(fd,er),ChartLineBig.data.datasets[1].data=compute_data,ChartLineBig.data.datasets[0].data=er,myChartMini.data.datasets[1].data=compute_data,myChartMini.data.datasets[0].data=er,myChartMini.data.labels=time,myChartMini.update()}),$("[data-fancybox]").fancybox({touch:!1});var acc=document.getElementsByClassName("accordion"),i;for(i=0;i<acc.length;i++)acc[i].addEventListener("click",function(){this.classList.toggle("active");var t=this.nextElementSibling;"table-row"===t.style.display?t.style.display="none":t.style.display="table-row"});keysAccordion(),$(window).resize(function(){keysAccordion()}),$(window).scroll(function(){var t=$(this).scrollTop();t>90?$(".mobile-nav").addClass("active"):$(".mobile-nav").removeClass("active")}),$(".menu").on("touch click",function(){$("#menu").toggleClass("active_menu"),$(".topnav").toggleClass("active"),$("a.menu").toggleClass("active")});var ctx=document.getElementById("mobile-chart").getContext("2d"),myChartMobileMini=new Chart(ctx,{type:"line",data:{labels:time,datasets:[{label:"Emotion recognition",borderColor:gradientEr,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientEr,borderWidth:1,data:er,lineTension:0},{label:"Face detector",borderColor:gradientFd,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientFd,borderWidth:1,data:compute_data,lineTension:0}]},options:{responsive:!0,tooltips:!1,maintainAspectRatio:!1,legend:{display:!1},scales:{yAxes:[{ticks:{display:!1,beginAtZero:!0},gridLines:{display:!1,tickMarkLength:0}}],xAxes:[{gridLines:{display:!1,tickMarkLength:0},ticks:{display:!1,beginAtZero:!0}}]}}}),ctx=document.getElementById("graph-mobile").getContext("2d"),chartMobileFull=new Chart(ctx,{type:"line",data:{labels:time,datasets:[{label:"Emotion recognition",borderColor:gradientEr,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientEr,borderWidth:3,data:er,lineTension:0},{label:"Face detector",borderColor:gradientFd,pointRadius:3,pointBackgroundColor:"transparent",pointBorderColor:"transparent",fill:!0,backgroundColor:gradientFd,borderWidth:3,data:compute_data,lineTension:0}]},options:{responsive:!0,tooltips:{mode:"index",intersect:!1,backgroundColor:"rgba(30, 37, 73, 0.5)",titleFontFamily:"inherit",height:"100%",position:"nearest",bodyFontColor:"#a9b2e1",bodyFontSize:14,bodySpacing:30,xPadding:20,yPadding:25,cornerRadius:0,multiKeyBackground:"transparent",enabled:!1},hover:{mode:"nearest",intersect:!0},maintainAspectRatio:!1,legend:{display:!1,position:"right",labels:{fontColor:"#54F0FF",fontSize:"14",lineHeight:"20px",usePointStyle:!0}},scales:{yAxes:[{ticks:{fontColor:"#6673B4",maxTicksLimit:5,padding:14,display:!0,beginAtZero:!0},gridLines:{drawTicks:!0,lineWidth:1,color:"rgba(102, 115, 180, 0.2)"}}],xAxes:[{gridLines:{zeroLineColor:"#fff",display:!1},ticks:{padding:8,fontColor:"#6673B4",beginAtZero:!0}}]}}}),filling=!0;$("#full-width-mobile-chart .icon-btn a").click(function(){var t=$(this).attr("data-fill");"true"===t?(filling=!0,$(this).attr("data-fill","false")):"false"===t&&(filling=!1,$(this).attr("data-fill","true")),chartMobileFull.data.datasets[0].fill=filling,chartMobileFull.data.datasets[1].fill=filling,chartMobileFull.update()}),$(".tabs-chart > li > a").click(function(){var t=$(this).attr("data-time");$(".tabs-chart li").removeClass("active"),$(this).parent("li").addClass("active"),"month"===t?(fd=[5,7,1,24,13,28,40,14,38,11,22,16,34,19,1,14,38,21],er=[38,11,22,16,34,19,1,14,5,7,1,24,13,28,40,14,5,14],time=["Mar 1",2,3,4,5,6,8,10,12,14,16,18,20,22,24,26,28,30]):"year"===t?(fd=[5,7,1,24,13,28,40,14,38,11,22,16],er=[38,11,22,16,34,19,1,14,5,7,1,24],time=["January","February","March","April","May","June","July","August","September","October","November","December"]):"ever"===t&&(fd=[5,7,1,24,13,28],er=[38,11,22,16,34,19],time=[2015,2016,2017,2018,2019,2020]),compute_data=stacked_data(fd,er),chartMobileFull.data.datasets[1].data=compute_data,chartMobileFull.data.datasets[0].data=er,chartMobileFull.data.labels=time,chartMobileFull.update(),legend_draw()}),$("#full-width-chart").click(function(){setTimeout(function(){legend_draw()},500)}),$(".change_pass-btn").click(function(){$(".password").toggleClass("d-block")}),$(".dashboard-info .dashboard_left-bar .nav .list_item:nth-child(1)").hasClass("active")&&$(".dashboard-info .dashboard_left-bar").addClass("active"),$(function(){$(".hide-show").show(),$(".hide-show span").addClass("show"),$(".hide-show span").click(function(){$(this).hasClass("show")?($(this).text("Hide"),$(this).parent().siblings(".password").attr("type","text"),$(this).removeClass("show")):($(this).text("Show"),$(this).parent().siblings(".password").attr("type","password"),$(this).addClass("show"))}),$(".change > a").on("click",function(){$(".hide-show span").text("Show").addClass("show"),$(".hide-show").parent().find(".password").attr("type","password")})}),$(".btn-change-long-page").click(function(){$(".main-info").toggleClass("long-page"),$(".dashboard_left-bar").toggleClass("long-page"),$("#dashboard").toggleClass("long-page"),$("#keys").toggleClass("long-page"),$("#users").toggleClass("long-page"),$("#payments").toggleClass("long-page"),$("#settings").toggleClass("long-page"),$(this).toggleClass("collapsed"),$("#chart-full").toggleClass("d-none"),$(".mini-chart").removeClass("d-none")});var $input=$('input[type="text"], input[type="password"], input[type="email"]');0!=$input.length?$(this).siblings("span").css("display","inline-block"):$(this).siblings("span").css("display","none"),$input.focus(function(){$(this).siblings("span").css("display","inline-block"),$(this).css("padding","0 0 10px 10px"),$(this).siblings(".hide-show").css("top","24px"),$(this).parent(":before").css("top","20px")}),$input.blur(function(){$(this).val()?($(this).siblings("span").css("display","inline-block"),$(this).css("padding","0 0 10px 10px"),$(this).siblings(".hide-show").css("top","24px"),$(this).parent(":before").css("top","20px")):($(this).siblings("span").css("display","none"),$(this).css("padding","15px 15px 15px 10px"),$(this).siblings(".hide-show").css("top","15px"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsic3VtbV9kYXRhIiwibSIsInJlcyIsImkiLCJzdGFja2VkX2RhdGEiLCJmZCIsImVyIiwicHVzaCIsImxlZ2VuZF9kcmF3IiwiTGFzdF9kYXRhX2VyIiwiQ2hhcnRMaW5lQmlnIiwiZ2V0RGF0YXNldE1ldGEiLCJkYXRhIiwibGVuZ3RoIiwiTGFzdF9kYXRhX2ZkIiwiJCIsImNzcyIsIl9tb2RlbCIsInkiLCJjaGFydE1vYmlsZUZ1bGwiLCJtb2JpbGVfYWxsX2NvbXB1dGUiLCJjb21wdXRlX2RhdGEiLCJGaXJzdF9kYXRhX2VyIiwiRmlyc3RfZGF0YV9mZCIsImZkX3ZhbCIsImVyX3ZhbCIsImZkX3MiLCJlcl9zIiwiYWxsIiwiZHJhd19tb2JpbGUiLCJhY3RpdmVQb2ludCIsImRhdGUiLCJtb3UiLCJ0aW1lIiwiX2luZGV4IiwieWVhciIsInR5cGUiLCJodG1sIiwiYXJyb3ciLCJjb2xvciIsInRoaXNZZWFyIiwiZXZ0IiwidGFiY29udGVudCIsInRhYmxpbmtzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiY2xhc3NOYW1lIiwicmVwbGFjZSIsImdldEVsZW1lbnRCeUlkIiwiY3VycmVudFRhcmdldCIsImtleXNBY2NvcmRpb24iLCJ3aW5kb3ciLCJ3aWR0aCIsImoiLCJrZXlBY2MiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0aGlzIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwicGFuZWwiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJjb250YWlucyIsIkNoYXJ0IiwibGFiZWxzIiwiZGF0YXNldHMiLCJsYWJlbCIsImJhY2tncm91bmRDb2xvciIsIm9wdGlvbnMiLCJwbHVnaW5zIiwic3RhY2tlZDEwMCIsImVuYWJsZSIsImxlZ2VuZCIsInNjYWxlcyIsInhBeGVzIiwieUF4ZXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiZ3JhZGllbnRGZCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiZ3JhZGllbnRFciIsImJvcmRlckNvbG9yIiwicG9pbnRSYWRpdXMiLCJwb2ludEJhY2tncm91bmRDb2xvciIsInBvaW50Qm9yZGVyQ29sb3IiLCJmaWxsIiwiYm9yZGVyV2lkdGgiLCJsaW5lVGVuc2lvbiIsInJlc3BvbnNpdmUiLCJldmVudHMiLCJ0b29sdGlwcyIsIm1vZGUiLCJ0aXRsZUZvbnRGYW1pbHkiLCJoZWlnaHQiLCJwb3NpdGlvbiIsImJvZHlGb250Q29sb3IiLCJib2R5Rm9udFNpemUiLCJib2R5U3BhY2luZyIsInhQYWRkaW5nIiwieVBhZGRpbmciLCJjb3JuZXJSYWRpdXMiLCJtdWx0aUtleUJhY2tncm91bmQiLCJlbmFibGVkIiwiaW50ZXJzZWN0IiwiaG92ZXIiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwiZm9udENvbG9yIiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwidXNlUG9pbnRTdHlsZSIsInRpY2tzIiwibWF4VGlja3NMaW1pdCIsInBhZGRpbmciLCJncmlkTGluZXMiLCJkcmF3VGlja3MiLCJsaW5lV2lkdGgiLCJ6ZXJvTGluZUNvbG9yIiwibW91c2VsZWF2ZSIsImJpbmQiLCJNZXRhRGF0YSIsIm1pblIiLCJmb3JFYWNoIiwiZWxlbWVudCIsIk1hdGgiLCJhYnMiLCJ4IiwicGFnZVgiLCJwb2ludDIiLCJjbGljayIsImZpbGxpbmciLCJkYXRhX2ZpbGwiLCJhdHRyIiwidXBkYXRlIiwiZGF0YV90aW1lIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImN0eDEiLCJkYXRhMSIsImNoYXJ0MSIsInRpdGxlIiwiY3V0b3V0UGVyY2VudGFnZSIsImJ0eCIsIm15Q2hhcnRNaW5pIiwiZmFuY3lib3giLCJ0b3VjaCIsImFjYyIsInJlc2l6ZSIsInNjcm9sbCIsIndTY3JvbGwiLCJzY3JvbGxUb3AiLCJvbiIsInRvZ2dsZUNsYXNzIiwibXlDaGFydE1vYmlsZU1pbmkiLCJiZWdpbkF0WmVybyIsInRpY2tNYXJrTGVuZ3RoIiwicGFyZW50Iiwic2V0VGltZW91dCIsImhhc0NsYXNzIiwic2hvdyIsInRleHQiLCJzaWJsaW5ncyIsImZpbmQiLCIkaW5wdXQiLCJmb2N1cyIsImJsdXIiLCJ2YWwiXSwibWFwcGluZ3MiOiJBQU9BLFFBQVNBLFdBQVVDLEdBRWYsR0FBSUMsR0FBSSxDQUNSLEtBQUssR0FBSUMsS0FBS0YsR0FFVkMsR0FBUUQsRUFBRUUsRUFFZCxPQUFPRCxHQUVYLFFBQVNFLGNBQWFDLEVBQUdDLEdBRXJCLEdBQUlKLEtBRUosS0FBSyxHQUFJQyxLQUFLRyxHQUNWSixFQUFJSyxLQUFLRCxFQUFHSCxHQUFHRSxFQUFHRixHQUV0QixPQUFPRCxHQTRJWCxRQUFTTSxlQUVMLEdBQUlDLEdBQWFDLGFBQWFDLGVBQWUsR0FBR0MsS0FBS0YsYUFBYUMsZUFBZSxHQUFHQyxLQUFLQyxPQUFPLEdBQzVGQyxFQUFhSixhQUFhQyxlQUFlLEdBQUdDLEtBQUtGLGFBQWFDLGVBQWUsR0FBR0MsS0FBS0MsT0FBTyxFQUNoR0UsR0FBRSxjQUFjQyxJQUFJLE1BQU1QLEVBQWFRLE9BQU9DLEVBQUUsTUFDaERILEVBQUUsY0FBY0MsSUFBSSxNQUFNRixFQUFhRyxPQUFPQyxFQUFFLE1BQzVDQyxrQkFFQVYsRUFBYVUsZ0JBQWdCUixlQUFlLEdBQUdDLEtBQUtPLGdCQUFnQlIsZUFBZSxHQUFHQyxLQUFLQyxPQUFPLEdBQ2xHQyxFQUFhSyxnQkFBZ0JSLGVBQWUsR0FBR0MsS0FBS08sZ0JBQWdCUixlQUFlLEdBQUdDLEtBQUtDLE9BQU8sR0FDbEdFLEVBQUUscUJBQXFCQyxJQUFJLE1BQU9QLEVBQWFRLE9BQU9DLEVBQUUsR0FBSSxNQUM1REgsRUFBRSxxQkFBcUJDLElBQUksTUFBT0YsRUFBYUcsT0FBT0MsRUFBRSxHQUFJLE1BQzVERSxzQkFTUixRQUFTQSxzQkFFTCxHQUFJWCxHQUFhSCxHQUFHZSxhQUFhUixPQUFPLEdBQ3BDQyxFQUFhTyxhQUFhQSxhQUFhUixPQUFPLEdBQzlDUyxFQUFjaEIsR0FBRyxHQUNqQmlCLEVBQWNGLGFBQWEs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LFVBRXBDRCxFQUFFNEMsTUFBTXdHLFNBQVMsUUFBUW5KLElBQUksVUFBVSxRQUN2Q0QsRUFBRTRDLE1BQU0zQyxJQUFJLFVBQVUsdUJBQ3RCRCxFQUFFNEMsTUFBTXdHLFNBQVMsY0FBY25KLElBQUksTUFBTSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVmFyaWFibGVzXHJcbnZhciBmZCA9IFs1LDcsMSwyNCwxMywyOCw0MCwxNCwzOCwxMSwyMiwxNiwzNCwxOSwxLDE0LDM4LDIxXTtcclxudmFyIGVyID0gWzM4LDExLDIyLDE2LDM0LDE5LDEsMTQsNSw3LDEsMjQsMTMsMjgsNDAsMTQsNSwxNF07XHJcblxyXG52YXIgdGltZSA9IFsnTWFyIDEnLCAyLCAzLCA0LCA1LCA2LCA4LCAxMCwgMTIsIDE0LCAxNiwgMTgsIDIwLCAyMiwgMjQsIDI2LCAyOCwgMzBdO1xyXG5cclxudmFyIGNvbXB1dGVfZGF0YT1zdGFja2VkX2RhdGEoZmQsZXIpO1xyXG5mdW5jdGlvbiBzdW1tX2RhdGEobSlcclxue1xyXG4gICAgdmFyIHJlcz0wO1xyXG4gICAgZm9yICh2YXIgaSBpbiBtKVxyXG4gICAge1xyXG4gICAgICAgIHJlcz1yZXMrbVtpXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gc3RhY2tlZF9kYXRhKGZkLGVyKVxyXG57XHJcbiAgICB2YXIgcmVzPVtdO1xyXG5cclxuICAgIGZvciAodmFyIGkgaW4gZXIpIHtcclxuICAgICAgICByZXMucHVzaChlcltpXStmZFtpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbi8vIEhvcml6b250YWxsIGJhciAxMDAlXHJcbm5ldyBDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhci1jaGFydC1ob3Jpem9udGFsXCIpLCB7XHJcbiAgICB0eXBlOiBcImhvcml6b250YWxCYXJcIixcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBsYWJlbHM6IFtcIkZvb1wiXSxcclxuICAgICAgICBkYXRhc2V0czogW1xyXG4gICAgICAgICAgICB7IGxhYmVsOiBcImJhZFwiLCBkYXRhOiBbMjVdLCBiYWNrZ3JvdW5kQ29sb3I6IFwiIzllYWVmZlwiIH0sXHJcbiAgICAgICAgICAgIHsgbGFiZWw6IFwiYmV0dGVyXCIsIGRhdGE6IFsxMF0sIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMylcIiB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgICBwbHVnaW5zOiB7XHJcbiAgICAgICAgICAgIHN0YWNrZWQxMDA6IHsgZW5hYmxlOiB0cnVlIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNjYWxlczoge1xyXG4gICAgICAgICAgICB4QXhlczogW3tcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICB5QXhlczogW3tcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbi8vIENoYXJ0IGxpbmUgYmlnXHJcbnZhciBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXlDaGFydCcpLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbnZhciBncmFkaWVudEZkID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIDAsIDI1MCk7XHJcbmdyYWRpZW50RmQuYWRkQ29sb3JTdG9wKDAsICdyZ2JhKDEzMywgOTMsIDI0OCwgMC45KScpO1xyXG5ncmFkaWVudEZkLmFkZENvbG9yU3RvcCgxLCAncmdiYSg2MCwgNDUsIDE2OSwgMC45KScpO1xyXG5cclxudmFyIGdyYWRpZW50RXIgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgMCwgMjUwKTtcclxuZ3JhZGllbnRFci5hZGRDb2xvclN0b3AoMCwgJ3JnYmEoODQsIDI0MCwgMjU1LCAwLjkpJyk7XHJcbmdyYWRpZW50RXIuYWRkQ29sb3JTdG9wKDEsICdyZ2JhKDE4LCAxMjUsIDE3NiwgMC45KScpO1xyXG5cclxudmFyIENoYXJ0TGluZUJpZyA9IG5ldyBDaGFydChjdHgsIHtcclxuICAgIHR5cGU6ICdsaW5lJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBsYWJlbHM6IHRpbWUsXHJcbiAgICAgICAgZGF0YXNldHM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRW1vdGlvbiByZWNvZ25pdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGdyYWRpZW50RXIsXHJcbiAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMTAwLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXHJcbiAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICAgICAgICAgICAgZmlsbDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZ3JhZGllbnRFcixcclxuICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogZXIsXHJcbiAgICAgICAgICAgICAgICBsaW5lVGVuc2lvbjogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJGYWNlIGRldGVjdG9yXCIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogZ3JhZGllbnRGZCxcclxuICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiA1MCxcclxuICAgICAgICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgICAgIGZpbGw6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGdyYWRpZW50RmQsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGNvbXB1dGVfZGF0YSxcclxuICAgICAgICAgICAgICAgIGxpbmVUZW5zaW9uOiAwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxyXG4gICAgICAgIGV2ZW50czogWydjbGljayddLFxyXG4gICAgICAgIHRvb2x0aXBzOiB7XHJcbiAgICAgICAgICAgIG1vZGU6ICdpbmRleCcsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMzAsIDM3LCA3MywgMC41KScsXHJcbiAgICAgICAgICAgIHRpdGxlRm9udEZhbWlseTogJ2luaGVyaXQnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICAgICAgcG9zaXRpb246J25lYXJlc3QnLFxyXG4gICAgICAgICAgICBib2R5Rm9udENvbG9yOiAnI2E5YjJlMScsXHJcbiAgICAgICAgICAgIGJvZHlGb250U2l6ZToxNCxcclxuICAgICAgICAgICAgYm9keVNwYWNpbmc6MzAsXHJcbiAgICAgICAgICAgIHhQYWRkaW5nOjIwLFxyXG4gICAgICAgICAgICB5UGFkZGluZzoyNSxcclxuICAgICAgICAgICAgY29ybmVyUmFkaXVzOjAsXHJcbiAgICAgICAgICAgIG11bHRpS2V5QmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGludGVyc2VjdDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICBtb2RlOiAnbmVhcmVzdCcsXHJcbiAgICAgICAgICAgIGludGVyc2VjdDogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXHJcbiAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6ZmFsc2UsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcInJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZm9udENvbG9yOiAnIzU0RjBGRicsXHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0JyxcclxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICcyMHB4JyxcclxuICAgICAgICAgICAgICAgIHVzZVBvaW50U3R5bGU6dHJ1ZSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2NhbGVzOiB7XHJcbiAgICAgICAgICAgIHlBeGVzOiBbe1xyXG4gICAgICAgICAgICAgICAgdGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IFwiIzY2NzNCNFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3VGlja3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcInJnYmEoMTAyLCAxMTUsIDE4MCwgMC4yKVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgeEF4ZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICB6ZXJvTGluZUNvbG9yOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogOCxcclxuICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IFwiIzY2NzNCNFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbiQoJyNteUNoYXJ0JykubW91c2VsZWF2ZShmdW5jdGlvbigpe1xyXG4gICAgJCgnI2JsYWNrX3Rvb2x0aXAnKS5jc3MoJ2Rpc3BsYXknLFwibm9uZVwiKTtcclxuICAgICQoJyNzcGVjaWFsX3Rvb2x0aXAnKS5jc3MoJ2Rpc3BsYXknLFwibm9uZVwiKTtcclxuICAgICQoJyNibGFja190b29sdGlwX3JpZ2h0JykuY3NzKCdkaXNwbGF5JyxcIm5vbmVcIik7XHJcbn0pO1xyXG5mdW5jdGlvbiBsZWdlbmRfZHJhdygpXHJcbntcclxuICAgIHZhciBMYXN0X2RhdGFfZXI9Q2hhcnRMaW5lQmlnLmdldERhdGFzZXRNZXRhKDApLmRhdGFbQ2hhcnRMaW5lQmlnLmdldERhdGFzZXRNZXRhKDApLmRhdGEubGVuZ3RoLTFdO1xyXG4gICAgdmFyIExhc3RfZGF0YV9mZD1DaGFydExpbmVCaWcuZ2V0RGF0YXNldE1ldGEoMSkuZGF0YVtDaGFydExpbmVCaWcuZ2V0RGF0YXNldE1ldGEoMSkuZGF0YS5sZW5ndGgtMV07XHJcbiAgICAkKCcjZXJfbGVnZW5kJykuY3NzKFwidG9wXCIsTGFzdF9kYXRhX2VyLl9tb2RlbC55K1wicHhcIik7XHJcbiAgICAkKCcjZmRfbGVnZW5kJykuY3NzKFwidG9wXCIsTGFzdF9kYXRhX2ZkLl9tb2RlbC55K1wicHhcIik7XHJcbiAgICBpZiAoY2hhcnRNb2JpbGVGdWxsKVxyXG4gICAge1xyXG4gICAgICAgIExhc3RfZGF0YV9lcj1jaGFydE1vYmlsZUZ1bGwuZ2V0RGF0YXNldE1ldGEoMCkuZGF0YVtjaGFydE1vYmlsZUZ1bGwuZ2V0RGF0YXNldE1ldGEoMCkuZGF0YS5sZW5ndGgtMV07XHJcbiAgICAgICAgTGFzdF9kYXRhX2ZkPWNoYXJ0TW9iaWxlRnVsbC5nZXREYXRhc2V0TWV0YSgxKS5kYXRhW2NoYXJ0TW9iaWxlRnVsbC5nZXREYXRhc2V0TWV0YSgxKS5kYXRhLmxlbmd0aC0xXTtcclxuICAgICAgICAkKCcjZXJfbGVnZW5kX21vYmlsZScpLmNzcyhcInRvcFwiLChMYXN0X2RhdGFfZXIuX21vZGVsLnktMzApK1wicHhcIik7XHJcbiAgICAgICAgJCgnI2ZkX2xlZ2VuZF9tb2JpbGUnKS5jc3MoXCJ0b3BcIiwoTGFzdF9kYXRhX2ZkLl9tb2RlbC55LTMwKStcInB4XCIpO1xyXG4gICAgICAgIG1vYmlsZV9hbGxfY29tcHV0ZSgpO1xyXG4gICAgfVxyXG59XHJcbmxlZ2VuZF9kcmF3KCk7XHJcbiQoJyNncmFwaC1tb2JpbGUnKS5tb3VzZWxlYXZlKGZ1bmN0aW9uKCl7XHJcbiAgICAkKCcjYmxhY2tfdG9vbHRpcF9tb2JpbGUnKS5jc3MoJ2Rpc3BsYXknLCdub25lJyk7XHJcbiAgICAkKCcjYmxhY2tfdG9vbHRpcF9yaWdodF9tb2JpbGUnKS5jc3MoJ2Rpc3BsYXknLCdub25lJyk7XHJcbiAgICBtb2JpbGVfYWxsX2NvbXB1dGUoKTtcclxufSk7XHJcbmZ1bmN0aW9uIG1vYmlsZV9hbGxfY29tcHV0ZSgpXHJcbntcclxuICAgIHZhciBMYXN0X2RhdGFfZXI9ZXJbY29tcHV0ZV9kYXRhLmxlbmd0aC0xXTtcclxuICAgIHZhciBMYXN0X2RhdGFfZmQ9Y29tcHV0ZV9kYXRhW2NvbXB1dGVfZGF0YS5sZW5ndGgtMV07XHJcbiAgICB2YXIgRmlyc3RfZGF0YV9lcj1lclswXTtcclxuICAgIHZhciBGaXJzdF9kYXRhX2ZkPWNvbXB1dGVfZGF0YVswXTtcclxuICAgIHZhciBmZF92YWw9TGFzdF9kYXRhX2ZkLUZpcnN0X2RhdGFfZmQ7XHJcbiAgICB2YXIgZXJfdmFsPUxhc3RfZGF0YV9lci1GaXJzdF9kYXRhX2VyO1xyXG4gICAgdmFyIGZkX3M9c3VtbV9kYXRhKGNvbXB1dGVfZGF0YSk7XHJcbiAgICB2YXIgZXJfcz1zdW1tX2RhdGEoZXIpO1xyXG4gICAgdmFyIGFsbD1mZF9zK2VyX3M7XHJcbiAgICBkcmF3X21vYmlsZShmYWxzZSxmZF92YWwsZXJfdmFsLGZkX3MsZXJfcyxhbGwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3X21vYmlsZShhY3RpdmVQb2ludCxmZF92YWwsZXJfdmFsLGZkLGVyLGFsbClcclxue1xyXG5cclxuICAgIHZhciBkYXRlO1xyXG4gICAgdmFyIG1vdT1cIk1hclwiO1xyXG4gICAgaWYgKGFjdGl2ZVBvaW50IT09ZmFsc2UpXHJcbiAgICB7XHJcbiAgICAgICAgZGF0ZT10aW1lW2FjdGl2ZVBvaW50Ll9pbmRleF07XHJcbiAgICAgICAgbW91PVwiTWFyXCI7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIGRhdGU9XCJBbGxcIjtcclxuICAgICAgICBtb3U9XCJBbGxcIjtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHllYXI9XCIyMDE5XCI7XHJcbiAgICB2YXIgdHlwZT1cIkRhaWx5XCI7XHJcbiAgICBpZiAodGltZS5sZW5ndGg9PTEyKVxyXG4gICAge1xyXG4gICAgICAgIG1vdT1kYXRlO1xyXG4gICAgICAgIHllYXI9XCIyMDE5XCI7XHJcbiAgICAgICAgdHlwZT1cIlllYXJcIjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGltZS5sZW5ndGg8MTEpXHJcbiAgICB7XHJcbiAgICAgICAgbW91PVwiQWxsXCI7XHJcbiAgICAgICAgeWVhcj1kYXRlO1xyXG4gICAgICAgIGlmIChkYXRlPT1cIkFsbFwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgeWVhcj1cIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0eXBlPVwiRXZlclwiO1xyXG4gICAgfVxyXG4gICAgJCgnLm1vbnRoJykuaHRtbChtb3UpO1xyXG4gICAgJCgnLnllYXInKS5odG1sKHllYXIpO1xyXG4gICAgJCgnLnNob3cnKS5odG1sKHR5cGUpO1xyXG4gICAgJCgnI21vYmlsZV90aW1lc190b3RhbCcpLmh0bWwoYWxsKTtcclxuICAgIHZhciBhcnJvdz0nJnVhcnInO1xyXG4gICAgdmFyIGNvbG9yPScjQjhFOTg2JztcclxuICAgIGlmIChmZF92YWw8MClcclxuICAgIHtcclxuICAgICAgICBhcnJvdz0nJmRhcnInO1xyXG4gICAgICAgIGNvbG9yPScjRkY3MjlBJztcclxuICAgIH1cclxuXHJcbiAgICAkKCcjbW9iaWxlX2ZkJykuaHRtbChmZCsnJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7PHNwYW4gc3R5bGU9XCJjb2xvcjonK2NvbG9yKyc7XCI+JytmZF92YWwrJyZuYnNwOyZuYnNwOycrYXJyb3crJzs8L3NwYW4+Jyk7XHJcbiAgICBhcnJvdz0nJnVhcnInO1xyXG4gICAgY29sb3I9JyNCOEU5ODYnO1xyXG4gICAgaWYgKGVyX3ZhbDwwKVxyXG4gICAge1xyXG4gICAgICAgIGFycm93PScmZGFycic7XHJcbiAgICAgICAgY29sb3I9JyNGRjcyOUEnO1xyXG4gICAgfVxyXG5cclxuICAgICQoJyNtb2JpbGVfZXInKS5odG1sKGVyKycmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDs8c3BhbiBzdHlsZT1cImNvbG9yOicrY29sb3IrJztcIj4nK2VyX3ZhbCsnJm5ic3A7Jm5ic3A7JythcnJvdysnOzwvc3Bhbj4nKTtcclxuXHJcblxyXG59XHJcblxyXG4kKCcjZ3JhcGgtbW9iaWxlJykuYmluZCgnbW91c2Vtb3ZlJywgIGZ1bmN0aW9uKGV2dCl7XHJcbiAgICB2YXIgTWV0YURhdGE9Y2hhcnRNb2JpbGVGdWxsLmdldERhdGFzZXRNZXRhKDApO1xyXG4gICAgdmFyIGFjdGl2ZVBvaW50O1xyXG4gICAgdmFyIG1pblI9MTAwO1xyXG4gICAgTWV0YURhdGEuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGVsZW1lbnQuX21vZGVsLngtZXZ0LnBhZ2VYKTxtaW5SKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYWN0aXZlUG9pbnQ9ZWxlbWVudDtcclxuICAgICAgICAgICAgbWluUj1NYXRoLmFicyhlbGVtZW50Ll9tb2RlbC54LWV2dC5wYWdlWCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY3RpdmVQb2ludCAmJiBhY3RpdmVQb2ludC5faW5kZXg+MClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICQoJyNibGFja190b29sdGlwX21vYmlsZScpLmNzcygnZGlzcGxheScsJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgICQoJyNibGFja190b29sdGlwX3JpZ2h0X21vYmlsZScpLmNzcygnZGlzcGxheScsJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgIHZhciBwb2ludDI9Y2hhcnRNb2JpbGVGdWxsLmdldERhdGFzZXRNZXRhKDApLmRhdGFbYWN0aXZlUG9pbnQuX2luZGV4LTFdO1xyXG4gICAgICAgICAgICAkKCcjYmxhY2tfdG9vbHRpcF9tb2JpbGUnKS5jc3MoJ3dpZHRoJywocG9pbnQyLl9tb2RlbC54LTQwKStcInB4XCIpO1xyXG4gICAgICAgICAgICAkKCcjYmxhY2tfdG9vbHRpcF9yaWdodF9tb2JpbGUnKS5jc3MoJ3dpZHRoJywoJCgnI2dyYXBoLW1vYmlsZScpLndpZHRoKCktYWN0aXZlUG9pbnQuX21vZGVsLngtMTApK1wicHhcIik7XHJcbiAgICAgICAgICAgIHZhciBmZF92YWw9Y29tcHV0ZV9kYXRhW2FjdGl2ZVBvaW50Ll9pbmRleF0tY29tcHV0ZV9kYXRhW3BvaW50Mi5faW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgZXJfdmFsPWVyW2FjdGl2ZVBvaW50Ll9pbmRleF0tZXJbcG9pbnQyLl9pbmRleF07XHJcbiAgICAgICAgICAgIHZhciBhbGw9Y29tcHV0ZV9kYXRhW2FjdGl2ZVBvaW50Ll9pbmRleF0rZXJbYWN0aXZlUG9pbnQuX2luZGV4XTtcclxuICAgICAgICAgICAgZHJhd19tb2JpbGUoYWN0aXZlUG9pbnQsZmRfdmFsLGVyX3ZhbCxjb21wdXRlX2RhdGFbYWN0aXZlUG9pbnQuX2luZGV4XSxlclthY3RpdmVQb2ludC5faW5kZXhdLGFsbCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbn0pO1xyXG5cclxuJCgnI215Q2hhcnQnKS5iaW5kKCdtb3VzZW1vdmUnLCAgZnVuY3Rpb24oZXZ0KXtcclxuXHJcbiAgICAgICAgdmFyIE1ldGFEYXRhPUNoYXJ0TGluZUJpZy5nZXREYXRhc2V0TWV0YSgwKTtcclxuXHJcbiAgICAgICAgdmFyIGFjdGl2ZVBvaW50O1xyXG4gICAgICAgIHZhciBtaW5SPTEwMDtcclxuICAgICAgICBNZXRhRGF0YS5kYXRhLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhlbGVtZW50Ll9tb2RlbC54LWV2dC5wYWdlWCs0MCk8bWluUilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlUG9pbnQ9ZWxlbWVudDtcclxuICAgICAgICAgICAgICAgIG1pblI9TWF0aC5hYnMoZWxlbWVudC5fbW9kZWwueC1ldnQucGFnZVgrNDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGFjdGl2ZVBvaW50ICYmIGFjdGl2ZVBvaW50Ll9pbmRleD4wKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHBvaW50Mj1DaGFydExpbmVCaWcuZ2V0RGF0YXNldE1ldGEoMCkuZGF0YVthY3RpdmVQb2ludC5faW5kZXgtMV07XHJcbiAgICAgICAgICAgIHZhciBmZF92YWw9Y29tcHV0ZV9kYXRhW2FjdGl2ZVBvaW50Ll9pbmRleF0tY29tcHV0ZV9kYXRhW3BvaW50Mi5faW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgZXJfdmFsPWVyW2FjdGl2ZVBvaW50Ll9pbmRleF0tZXJbcG9pbnQyLl9pbmRleF07XHJcbiAgICAgICAgICAgIHZhciBhbGw9ZXJbYWN0aXZlUG9pbnQuX2luZGV4XStjb21wdXRlX2RhdGFbYWN0aXZlUG9pbnQuX2luZGV4XTtcclxuICAgICAgICAgICAgJCgnI2FsbF90aXAnKS5odG1sKGFsbCk7XHJcbiAgICAgICAgICAgIHZhciBhcnJvdz0nJnVhcnInO1xyXG4gICAgICAgICAgICB2YXIgY29sb3I9JyNCOEU5ODYnO1xyXG4gICAgICAgICAgICBpZiAoZmRfdmFsPDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFycm93PScmZGFycic7XHJcbiAgICAgICAgICAgICAgICBjb2xvcj0nI0ZGNzI5QSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJCgnI2ZkX3RpcCcpLmh0bWwoY29tcHV0ZV9kYXRhW2FjdGl2ZVBvaW50Ll9pbmRleF0rJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOzxzcGFuIHN0eWxlPVwiY29sb3I6Jytjb2xvcisnO1wiPicrZmRfdmFsKycmbmJzcDsmbmJzcDsnK2Fycm93Kyc7PC9zcGFuPicpO1xyXG4gICAgICAgICAgICBhcnJvdz0nJnVhcnInO1xyXG4gICAgICAgICAgICBjb2xvcj0nI0I4RTk4Nic7XHJcbiAgICAgICAgICAgIGlmIChlcl92YWw8MClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYXJyb3c9JyZkYXJyJztcclxuICAgICAgICAgICAgICAgIGNvbG9yPScjRkY3MjlBJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJCgnI2VyX3RpcCcpLmh0bWwoZXJbYWN0aXZlUG9pbnQuX2luZGV4XSsnJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7PHNwYW4gc3R5bGU9XCJjb2xvcjonK2NvbG9yKyc7XCI+Jytlcl92YWwrJyZuYnNwOyZuYnNwOycrYXJyb3crJzs8L3NwYW4+Jyk7XHJcbiAgICAgICAgICAgIC8vIGFsZXJ0KGZkW3BvaW50Mi5faW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICQoJyNibGFja190b29sdGlwJykuY3NzKCdkaXNwbGF5JyxcImJsb2NrXCIpO1xyXG4gICAgICAgICAgICAkKCcjc3BlY2lhbF90b29sdGlwJykuY3NzKCdkaXNwbGF5JyxcImJsb2NrXCIpO1xyXG4gICAgICAgICAgICAkKCcjYmxhY2tfdG9vbHRpcF9yaWdodCcpLmNzcygnZGlzcGxheScsXCJibG9ja1wiKTtcclxuICAgICAgICAgICAgJCgnI2JsYWNrX3Rvb2x0aXAnKS5jc3MoJ3dpZHRoJywocG9pbnQyLl9tb2RlbC54LTQwKStcInB4XCIpO1xyXG4gICAgICAgICAgICBpZiAoKGFjdGl2ZVBvaW50Ll9tb2RlbC54KSsxOTA+JCgnI215Q2hhcnQnKS53aWR0aCgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAkKCcjc3BlY2lhbF90b29sdGlwJykuY3NzKCdsZWZ0JywocG9pbnQyLl9tb2RlbC54LTE5MCkrXCJweFwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNibGFja190b29sdGlwJykuY3NzKCd3aWR0aCcsKHBvaW50Mi5fbW9kZWwueC00MC0xOTApK1wicHhcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnI2JsYWNrX3Rvb2x0aXBfcmlnaHQnKS5jc3MoJ3dpZHRoJywoJCgnI215Q2hhcnQnKS53aWR0aCgpLWFjdGl2ZVBvaW50Ll9tb2RlbC54LTEwKStcInB4XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJCgnI3NwZWNpYWxfdG9vbHRpcCcpLmNzcygnbGVmdCcsYWN0aXZlUG9pbnQuX21vZGVsLngrXCJweFwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNibGFja190b29sdGlwX3JpZ2h0JykuY3NzKCd3aWR0aCcsKCQoJyNteUNoYXJ0Jykud2lkdGgoKS1hY3RpdmVQb2ludC5fbW9kZWwueC0xMC0xOTApK1wicHhcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyogZG8gc29tZXRoaW5nICovXHJcbiAgICB9XHJcbik7XHJcblxyXG4vL2NoYW5nZSBmaWxsXHJcbiQoJy5jaGFydC1mdWxsIC5jaGFydHMgLnJpZ2h0IC5pY29uLWJ0biBhJykuY2xpY2soZnVuY3Rpb24oKXtcclxuICAgIHZhciBkYXRhX2ZpbGwgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtZmlsbCcpO1xyXG4gICAgdmFyIGZpbGxpbmc7XHJcbiAgICBpZiAoZGF0YV9maWxsID09PSAndHJ1ZScpe1xyXG4gICAgICAgIGZpbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgIGNvbXB1dGVfZGF0YT1zdGFja2VkX2RhdGEoZmQsZXIpO1xyXG5cclxuICAgICAgICAkKHRoaXMpLmF0dHIoJ2RhdGEtZmlsbCcsJ2ZhbHNlJyk7XHJcbiAgICB9XHJcbiAgICBpZihkYXRhX2ZpbGwgPT09ICdmYWxzZScpe1xyXG4gICAgICAgIGZpbGxpbmcgPSBmYWxzZTtcclxuICAgICAgICBjb21wdXRlX2RhdGE9ZmQ7XHJcbiAgICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLWZpbGwnLCd0cnVlJyk7XHJcbiAgICB9XHJcbiAgICBDaGFydExpbmVCaWcuZGF0YS5kYXRhc2V0c1sxXS5kYXRhPWNvbXB1dGVfZGF0YTtcclxuICAgIENoYXJ0TGluZUJpZy5kYXRhLmRhdGFzZXRzWzBdLmZpbGwgPSBmaWxsaW5nO1xyXG4gICAgQ2hhcnRMaW5lQmlnLmRhdGEuZGF0YXNldHNbMV0uZmlsbCA9IGZpbGxpbmc7XHJcbiAgICBDaGFydExpbmVCaWcudXBkYXRlKCk7XHJcbiAgICBsZWdlbmRfZHJhdygpO1xyXG59KTtcclxuXHJcbi8vY2hhbmdlIHBlcmlvZFxyXG4kKCcuY2hhcnQtZnVsbCAuY2hhcnRzIC5yaWdodCAudGFicyBhJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGF0YV90aW1lID0gJCh0aGlzKS5hdHRyKCdkYXRhLXRpbWUnKTtcclxuXHJcbiAgICAkKCcuY2hhcnRzIC5yaWdodCAudGFicyBhJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblxyXG4gICAgaWYgKGRhdGFfdGltZSA9PT0gJ21vbnRoJykge1xyXG4gICAgICAgIGZkID0gWzUsNywxLDI0LDEzLDI4LDQwLDE0LDM4LDExLDIyLDE2LDM0LDE5LDEsMTQsMzgsMjFdO1xyXG4gICAgICAgIGVyID0gWzM4LDExLDIyLDE2LDM0LDE5LDEsMTQsNSw3LDEsMjQsMTMsMjgsNDAsMTQsNSwxNF07XHJcbiAgICAgICAgdGltZSA9IFsnTWFyIDEnLCAyLCAzLCA0LCA1LCA2LCA4LCAxMCwgMTIsIDE0LCAxNiwgMTgsIDIwLCAyMiwgMjQsIDI2LCAyOCwgMzBdO1xyXG4gICAgfWVsc2UgaWYgKGRhdGFfdGltZSA9PT0gJ3llYXInKSB7XHJcbiAgICAgICAgZmQ9WzUsNywxLDI0LDEzLDI4LDQwLDE0LDM4LDExLDIyLDE2XTtcclxuICAgICAgICBlcj1bMzgsMTEsMjIsMTYsMzQsMTksMSwxNCw1LDcsMSwyNF07XHJcbiAgICAgICAgdGltZSA9IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddO1xyXG4gICAgfWVsc2UgaWYgKGRhdGFfdGltZSA9PT0gJ2V2ZXInKSB7XHJcbiAgICAgICAgZmQ9WzUsNywxLDI0LDEzLDI4XTtcclxuICAgICAgICBlcj1bMzgsMTEsMjIsMTYsMzQsMTldO1xyXG4gICAgICAgIHRpbWUgPSBbMjAxNSwgMjAxNiwgMjAxNywgMjAxOCwgMjAxOSwgMjAyMF07XHJcbiAgICB9XHJcblxyXG4gICAgY29tcHV0ZV9kYXRhPXN0YWNrZWRfZGF0YShmZCxlcik7XHJcbiAgICBDaGFydExpbmVCaWcuZGF0YS5kYXRhc2V0c1sxXS5kYXRhID0gY29tcHV0ZV9kYXRhO1xyXG4gICAgQ2hhcnRMaW5lQmlnLmRhdGEuZGF0YXNldHNbMF0uZGF0YT0gZXI7XHJcblxyXG4gICAgQ2hhcnRMaW5lQmlnLmRhdGEubGFiZWxzID0gdGltZTtcclxuICAgIENoYXJ0TGluZUJpZy51cGRhdGUoKTtcclxuICAgIGxlZ2VuZF9kcmF3KCk7XHJcbn0pO1xyXG5cclxuLy8gRG91Z2hudXQgY2hhcnRcclxudmFyIGN0eDEgPSAkKFwiI2RvdWdobnV0LWNoYXJ0Y2FudmFzLTFcIik7XHJcblxyXG52YXIgZGF0YTEgPSB7XHJcbiAgICBsYWJlbHM6IFtcIkZhY2UgZGV0ZWN0b3JcIiwgXCJFbW90aW9uIHJlY29nbml0aW9uXCJdLFxyXG4gICAgZGF0YXNldHM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGRhdGE6IFs4NSwgMTVdLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFtcclxuICAgICAgICAgICAgICAgIFwiIzU0ZjBmZlwiLFxyXG4gICAgICAgICAgICAgICAgXCIjODU1ZGY4XCJcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFtcclxuICAgICAgICAgICAgICAgIFwiIzU0ZjBmZlwiLFxyXG4gICAgICAgICAgICAgICAgXCIjODU1ZGY4XCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIF1cclxufTtcclxuXHJcbnZhciBjaGFydDEgPSBuZXcgQ2hhcnQoY3R4MSwge1xyXG4gICAgdHlwZTogXCJkb3VnaG51dFwiLFxyXG4gICAgZGF0YTogZGF0YTEsXHJcbiAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcclxuICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3V0b3V0UGVyY2VudGFnZTogOTgsXHJcbiAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b29sdGlwczpmYWxzZVxyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG4vLyBjaGFydE1pbmlcclxudmFyIGJ0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNoYXJ0TWluaScpLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbnZhciBteUNoYXJ0TWluaSA9IG5ldyBDaGFydChidHgsIHtcclxuICAgIHR5cGU6ICdsaW5lJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBsYWJlbHM6IHRpbWUsXHJcbiAgICAgICAgZGF0YXNldHM6IFtcclxuXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkVyXCIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogZ3JhZGllbnRFcixcclxuICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAzLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXHJcbiAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICAgICAgICAgICAgZmlsbDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZ3JhZGllbnRFcixcclxuICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogZXIsXHJcbiAgICAgICAgICAgICAgICBsaW5lVGVuc2lvbjogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJGZFwiLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGdyYWRpZW50RmQsXHJcbiAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMyxcclxuICAgICAgICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgICAgIGZpbGw6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGdyYWRpZW50RmQsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGNvbXB1dGVfZGF0YSxcclxuICAgICAgICAgICAgICAgIGxpbmVUZW5zaW9uOiAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgb3B0aW9uczoge1xyXG4gICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbiAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXHJcbiAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6ZmFsc2UsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcInJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZm9udENvbG9yOiAnIzU0RjBGRicsXHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0JyxcclxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICcyMCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2NhbGVzOiB7XHJcbiAgICAgICAgICAgIHlBeGVzOiBbe1xyXG4gICAgICAgICAgICAgICAgdGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IFwiIzY2NzNCNFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTQsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTpmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdyaWRMaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdUaWNrczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwicmdiYSgxMDIsIDExNSwgMTgwLCAwLjIpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTpmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIHhBeGVzOiBbe1xyXG4gICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgemVyb0xpbmVDb2xvcjogXCIjZmZmXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0aWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDgsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiBcIiM2NjczQjRcIixcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OmZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbi8vY2hhbmdlIGZpbGxcclxuJCgnLnJpZ2h0LWJhciAubWluaS1jaGFydCAudGFicyBhW2RhdGEtZmlsbF0nKS5jbGljayhmdW5jdGlvbigpe1xyXG4gICAgdmFyIGRhdGFfZmlsbCA9ICQodGhpcykuYXR0cignZGF0YS1maWxsJyk7XHJcbiAgICB2YXIgZmlsbGluZztcclxuICAgIGlmIChkYXRhX2ZpbGwgPT09ICd0cnVlJyl7XHJcbiAgICAgICAgZmlsbGluZyA9IHRydWU7XHJcbiAgICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLWZpbGwnLCdmYWxzZScpO1xyXG4gICAgfVxyXG4gICAgaWYoZGF0YV9maWxsID09PSAnZmFsc2UnKXtcclxuICAgICAgICBmaWxsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLWZpbGwnLCd0cnVlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgbXlDaGFydE1pbmkuZGF0YS5kYXRhc2V0c1swXS5maWxsID0gZmlsbGluZztcclxuICAgIG15Q2hhcnRNaW5pLmRhdGEuZGF0YXNldHNbMV0uZmlsbCA9IGZpbGxpbmc7XHJcbiAgICBteUNoYXJ0TWluaS51cGRhdGUoKTtcclxufSk7XHJcblxyXG4vL2NoYW5nZSBwZXJpb2RcclxuJCgnLnJpZ2h0LWJhciAubWluaS1jaGFydCAudGFicyBhW2RhdGEtdGltZV0nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgIHZhciBkYXRhX3RpbWUgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdGltZScpO1xyXG4gICAgJCh0aGlzKS5hdHRyKCdkYXRhLXRpbWUnLCdtb250aCcpO1xyXG4gICAgJCh0aGlzKS5odG1sKCdNb250aCcpO1xyXG4gICAgaWYgKGRhdGFfdGltZSA9PT0gJ21vbnRoJylcclxuICAgIHtcclxuICAgICAgICAkKHRoaXMpLmF0dHIoJ2RhdGEtdGltZScsJ3llYXInKTtcclxuICAgICAgICAkKHRoaXMpLmh0bWwoJ1llYXInKTtcclxuICAgIH1cclxuICAgIGlmIChkYXRhX3RpbWUgPT09ICd5ZWFyJylcclxuICAgIHtcclxuICAgICAgICAkKHRoaXMpLmF0dHIoJ2RhdGEtdGltZScsJ2V2ZXInKTtcclxuICAgICAgICAkKHRoaXMpLmh0bWwoJ0V2ZXInKTtcclxuICAgIH1cclxuICAgIGRhdGFfdGltZSA9ICQodGhpcykuYXR0cignZGF0YS10aW1lJyk7XHJcblxyXG4gICAgaWYgKGRhdGFfdGltZSA9PT0gJ21vbnRoJykge1xyXG4gICAgICAgIGZkID0gWzUsNywxLDI0LDEzLDI4LDQwLDE0LDM4LDExLDIyLDE2LDM0LDE5LDEsMTQsMzgsMjFdO1xyXG4gICAgICAgIGVyID0gWzM4LDExLDIyLDE2LDM0LDE5LDEsMTQsNSw3LDEsMjQsMTMsMjgsNDAsMTQsNSwxNF07XHJcblxyXG4gICAgICAgIHRpbWUgPSBbJ01hciAxJywgMiwgMywgNCwgNSwgNiwgOCwgMTAsIDEyLCAxNCwgMTYsIDE4LCAyMCwgMjIsIDI0LCAyNiwgMjgsIDMwXTtcclxuICAgIH1lbHNlIGlmIChkYXRhX3RpbWUgPT09ICd5ZWFyJykge1xyXG4gICAgICAgIGZkPVs1LDcsMSwyNCwxMywyOCw0MCwxNCwzOCwxMSwyMiwxNl07XHJcbiAgICAgICAgZXI9WzM4LDExLDIyLDE2LDM0LDE5LDEsMTQsNSw3LDEsMjRdO1xyXG5cclxuICAgICAgICB0aW1lID0gWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ107XHJcbiAgICB9ZWxzZSBpZiAoZGF0YV90aW1lID09PSAnZXZlcicpIHtcclxuICAgICAgICBmZD1bNSw3LDEsMjQsMTMsMjhdO1xyXG4gICAgICAgIGVyPVszOCwxMSwyMiwxNiwzNCwxOV07XHJcblxyXG4gICAgICAgIHRpbWUgPSBbMjAxNSwgMjAxNiwgMjAxNywgMjAxOCwgMjAxOSwgMjAyMF07XHJcbiAgICB9XHJcbiAgICBjb21wdXRlX2RhdGE9c3RhY2tlZF9kYXRhKGZkLGVyKTtcclxuICAgIENoYXJ0TGluZUJpZy5kYXRhLmRhdGFzZXRzWzFdLmRhdGEgPSBjb21wdXRlX2RhdGE7XHJcbiAgICBDaGFydExpbmVCaWcuZGF0YS5kYXRhc2V0c1swXS5kYXRhPSBlcjtcclxuXHJcbiAgICBteUNoYXJ0TWluaS5kYXRhLmRhdGFzZXRzWzFdLmRhdGEgPSBjb21wdXRlX2RhdGE7XHJcbiAgICBteUNoYXJ0TWluaS5kYXRhLmRhdGFzZXRzWzBdLmRhdGE9IGVyO1xyXG4gICAgbXlDaGFydE1pbmkuZGF0YS5sYWJlbHMgPSB0aW1lO1xyXG4gICAgbXlDaGFydE1pbmkudXBkYXRlKCk7XHJcbn0pO1xyXG5cclxuLy8gUGF5bWVudHMgdGFic1xyXG5mdW5jdGlvbiB0aGlzWWVhcihldnQsIHllYXIpIHtcclxuICAgIHZhciBpLCB0YWJjb250ZW50LCB0YWJsaW5rcztcclxuICAgIHRhYmNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGFiY29udGVudFwiKTtcclxuICAgIGZvciAoaSA9IDA7IGkgPCB0YWJjb250ZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGFiY29udGVudFtpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcbiAgICB0YWJsaW5rcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJsaW5rc1wiKTtcclxuICAgIGZvciAoaSA9IDA7IGkgPCB0YWJsaW5rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHRhYmxpbmtzW2ldLmNsYXNzTmFtZSA9IHRhYmxpbmtzW2ldLmNsYXNzTmFtZS5yZXBsYWNlKFwiIGFjdGl2ZVwiLCBcIlwiKTtcclxuICAgIH1cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHllYXIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICBldnQuY3VycmVudFRhcmdldC5jbGFzc05hbWUgKz0gXCIgYWN0aXZlXCI7XHJcbn1cclxuXHJcbi8vIE1vZGFsIHdpbmRvd3NcclxuJCgnW2RhdGEtZmFuY3lib3hdJykuZmFuY3lib3goe1xyXG4gICAgdG91Y2g6IGZhbHNlXHJcbn0pO1xyXG5cclxuLy8gQWNjb3JkaW9uXHJcbi8vIHBheW1lbnRzIGFjY29yZGlvblxyXG52YXIgYWNjID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImFjY29yZGlvblwiKTtcclxudmFyIGk7XHJcblxyXG5mb3IgKGkgPSAwOyBpIDwgYWNjLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBhY2NbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTtcclxuICAgICAgICB2YXIgcGFuZWwgPSB0aGlzLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICBpZiAocGFuZWwuc3R5bGUuZGlzcGxheSA9PT0gXCJ0YWJsZS1yb3dcIikge1xyXG4gICAgICAgICAgICBwYW5lbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGFuZWwuc3R5bGUuZGlzcGxheSA9IFwidGFibGUtcm93XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLy8ga2V5cyBhY2NvcmRpb25cclxuZnVuY3Rpb24ga2V5c0FjY29yZGlvbigpIHtcclxuICAgIGlmKCQod2luZG93KS53aWR0aCgpIDwgNTYwKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBrZXlBY2MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwia2V5c1wiKTtcclxuICAgICAgICB2YXIgajtcclxuXHJcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGtleUFjYy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBrZXlBY2Nbal0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFuZWwgPSB0aGlzLm5leHRFbGVtZW50U2libGluZztcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAocGFuZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhbmVsLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuLWJ1dHRvbnMta2V5cycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFuZWwuY2xhc3NMaXN0LnRvZ2dsZSgnZC1ub25lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFuZWwgPSBwYW5lbC5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmtleXNBY2NvcmRpb24oKTtcclxuXHJcbiQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XHJcbiAgICBrZXlzQWNjb3JkaW9uKCk7XHJcbn0pO1xyXG5cclxuLy8gTW9iaWxlIG1lbnUgZml4ZWRcclxuJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpe1xyXG4gICAgdmFyIHdTY3JvbGwgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xyXG5cclxuICAgIGlmICh3U2Nyb2xsID4gOTApIHtcclxuICAgICAgICAkKCcubW9iaWxlLW5hdicpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgICQoJy5tb2JpbGUtbmF2JykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8vIE1lbnUgZGFzaGJvYXJkXHJcbiQoJy5tZW51Jykub24oJ3RvdWNoIGNsaWNrJywgZnVuY3Rpb24oKXtcclxuICAgICQoJyNtZW51JykudG9nZ2xlQ2xhc3MoJ2FjdGl2ZV9tZW51Jyk7XHJcbiAgICAkKCcudG9wbmF2JykudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJCgnYS5tZW51JykudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xyXG59KTtcclxuXHJcbi8vIENoYXJ0IG1vYmlsZSBtaW5pXHJcbnZhciBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9iaWxlLWNoYXJ0JykuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxudmFyIG15Q2hhcnRNb2JpbGVNaW5pID0gbmV3IENoYXJ0KGN0eCwge1xyXG4gICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIGxhYmVsczogdGltZSxcclxuICAgICAgICBkYXRhc2V0czogW1xyXG5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRW1vdGlvbiByZWNvZ25pdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGdyYWRpZW50RXIsXHJcbiAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMyxcclxuICAgICAgICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgICAgIGZpbGw6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGdyYWRpZW50RXIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGVyLFxyXG4gICAgICAgICAgICAgICAgbGluZVRlbnNpb246IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRmFjZSBkZXRlY3RvclwiLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGdyYWRpZW50RmQsXHJcbiAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMyxcclxuICAgICAgICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgICAgIGZpbGw6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGdyYWRpZW50RmQsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGNvbXB1dGVfZGF0YSxcclxuICAgICAgICAgICAgICAgIGxpbmVUZW5zaW9uOiAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAgb3B0aW9uczoge1xyXG4gICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcHM6IGZhbHNlLFxyXG4gICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxyXG4gICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICBkaXNwbGF5OmZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzY2FsZXM6IHtcclxuICAgICAgICAgICAgeUF4ZXM6IFt7XHJcbiAgICAgICAgICAgICAgICB0aWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OmZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpY2tNYXJrTGVuZ3RoOiAwXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgeEF4ZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0aWNrTWFya0xlbmd0aDogMFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTpmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG4vLyBDaGFydCBtb2JpbGUgZnVsbFxyXG52YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dyYXBoLW1vYmlsZScpLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbnZhciBjaGFydE1vYmlsZUZ1bGwgPSBuZXcgQ2hhcnQoY3R4LCB7XHJcbiAgICB0eXBlOiAnbGluZScsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgbGFiZWxzOiB0aW1lLFxyXG4gICAgICAgIGRhdGFzZXRzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkVtb3Rpb24gcmVjb2duaXRpb25cIixcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBncmFkaWVudEVyLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDMsXHJcbiAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXHJcbiAgICAgICAgICAgICAgICBmaWxsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBncmFkaWVudEVyLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDMsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBlcixcclxuICAgICAgICAgICAgICAgIGxpbmVUZW5zaW9uOiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkZhY2UgZGV0ZWN0b3JcIixcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBncmFkaWVudEZkLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDMsXHJcbiAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXHJcbiAgICAgICAgICAgICAgICBmaWxsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBncmFkaWVudEZkLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDMsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBjb21wdXRlX2RhdGEsXHJcbiAgICAgICAgICAgICAgICBsaW5lVGVuc2lvbjogMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXBzOiB7XHJcbiAgICAgICAgICAgIG1vZGU6ICdpbmRleCcsXHJcbiAgICAgICAgICAgIGludGVyc2VjdDogZmFsc2UsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMzAsIDM3LCA3MywgMC41KScsXHJcbiAgICAgICAgICAgIHRpdGxlRm9udEZhbWlseTogJ2luaGVyaXQnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICAgICAgcG9zaXRpb246J25lYXJlc3QnLFxyXG4gICAgICAgICAgICBib2R5Rm9udENvbG9yOiAnI2E5YjJlMScsXHJcbiAgICAgICAgICAgIGJvZHlGb250U2l6ZToxNCxcclxuICAgICAgICAgICAgYm9keVNwYWNpbmc6MzAsXHJcbiAgICAgICAgICAgIHhQYWRkaW5nOjIwLFxyXG4gICAgICAgICAgICB5UGFkZGluZzoyNSxcclxuICAgICAgICAgICAgY29ybmVyUmFkaXVzOjAsXHJcbiAgICAgICAgICAgIG11bHRpS2V5QmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgIG1vZGU6ICduZWFyZXN0JyxcclxuICAgICAgICAgICAgaW50ZXJzZWN0OiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcclxuICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgZGlzcGxheTpmYWxzZSxcclxuICAgICAgICAgICAgcG9zaXRpb246IFwicmlnaHRcIixcclxuICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBmb250Q29sb3I6ICcjNTRGMEZGJyxcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTQnLFxyXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgICAgICAgICAgdXNlUG9pbnRTdHlsZTp0cnVlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzY2FsZXM6IHtcclxuICAgICAgICAgICAgeUF4ZXM6IFt7XHJcbiAgICAgICAgICAgICAgICB0aWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogXCIjNjY3M0I0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4VGlja3NMaW1pdDogNSxcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxNCxcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OnRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3VGlja3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcInJnYmEoMTAyLCAxMTUsIDE4MCwgMC4yKVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgeEF4ZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICB6ZXJvTGluZUNvbG9yOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogOCxcclxuICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IFwiIzY2NzNCNFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luQXRaZXJvOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxudmFyIGZpbGxpbmcgPSB0cnVlO1xyXG5cclxuLy9jaGFuZ2UgZmlsbFxyXG4kKCcjZnVsbC13aWR0aC1tb2JpbGUtY2hhcnQgLmljb24tYnRuIGEnKS5jbGljayhmdW5jdGlvbigpe1xyXG4gICAgdmFyIGRhdGFfZmlsbCA9ICQodGhpcykuYXR0cignZGF0YS1maWxsJyk7XHJcblxyXG4gICAgaWYgKGRhdGFfZmlsbCA9PT0gJ3RydWUnKXtcclxuICAgICAgICBmaWxsaW5nID0gdHJ1ZTtcclxuICAgICAgICAkKHRoaXMpLmF0dHIoJ2RhdGEtZmlsbCcsJ2ZhbHNlJyk7XHJcbiAgICB9ZWxzZSAgaWYoZGF0YV9maWxsID09PSAnZmFsc2UnKXtcclxuICAgICAgICBmaWxsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLWZpbGwnLCd0cnVlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhcnRNb2JpbGVGdWxsLmRhdGEuZGF0YXNldHNbMF0uZmlsbCA9IGZpbGxpbmc7XHJcbiAgICBjaGFydE1vYmlsZUZ1bGwuZGF0YS5kYXRhc2V0c1sxXS5maWxsID0gZmlsbGluZztcclxuICAgIGNoYXJ0TW9iaWxlRnVsbC51cGRhdGUoKTtcclxufSk7XHJcblxyXG4vL2NoYW5nZSBwZXJpb2RcclxuJCgnLnRhYnMtY2hhcnQgPiBsaSA+IGEnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgIHZhciBkYXRhX3RpbWUgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdGltZScpO1xyXG5cclxuICAgICQoJy50YWJzLWNoYXJ0IGxpJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJCh0aGlzKS5wYXJlbnQoJ2xpJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuXHJcbiAgICBpZiAoZGF0YV90aW1lID09PSAnbW9udGgnKSB7XHJcbiAgICAgICAgZmQgPSBbNSw3LDEsMjQsMTMsMjgsNDAsMTQsMzgsMTEsMjIsMTYsMzQsMTksMSwxNCwzOCwyMV07XHJcbiAgICAgICAgZXIgPSBbMzgsMTEsMjIsMTYsMzQsMTksMSwxNCw1LDcsMSwyNCwxMywyOCw0MCwxNCw1LDE0XTtcclxuICAgICAgICB0aW1lID0gWydNYXIgMScsIDIsIDMsIDQsIDUsIDYsIDgsIDEwLCAxMiwgMTQsIDE2LCAxOCwgMjAsIDIyLCAyNCwgMjYsIDI4LCAzMF07XHJcbiAgICB9ZWxzZSBpZiAoZGF0YV90aW1lID09PSAneWVhcicpIHtcclxuICAgICAgICBmZD1bNSw3LDEsMjQsMTMsMjgsNDAsMTQsMzgsMTEsMjIsMTZdO1xyXG4gICAgICAgIGVyPVszOCwxMSwyMiwxNiwzNCwxOSwxLDE0LDUsNywxLDI0XTtcclxuICAgICAgICB0aW1lID0gWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ107XHJcbiAgICB9ZWxzZSBpZiAoZGF0YV90aW1lID09PSAnZXZlcicpIHtcclxuICAgICAgICBmZD1bNSw3LDEsMjQsMTMsMjhdO1xyXG4gICAgICAgIGVyPVszOCwxMSwyMiwxNiwzNCwxOV07XHJcbiAgICAgICAgdGltZSA9IFsyMDE1LCAyMDE2LCAyMDE3LCAyMDE4LCAyMDE5LCAyMDIwXTtcclxuICAgIH1cclxuICAgIGNvbXB1dGVfZGF0YT1zdGFja2VkX2RhdGEoZmQsZXIpO1xyXG4gICAgY2hhcnRNb2JpbGVGdWxsLmRhdGEuZGF0YXNldHNbMV0uZGF0YSA9IGNvbXB1dGVfZGF0YTtcclxuICAgIGNoYXJ0TW9iaWxlRnVsbC5kYXRhLmRhdGFzZXRzWzBdLmRhdGE9IGVyO1xyXG5cclxuICAgIGNoYXJ0TW9iaWxlRnVsbC5kYXRhLmxhYmVscyA9IHRpbWU7XHJcbiAgICBjaGFydE1vYmlsZUZ1bGwudXBkYXRlKCk7XHJcbiAgICBsZWdlbmRfZHJhdygpO1xyXG59KTtcclxuXHJcbi8vIE1vYmlsZSBkZXRhaWwgYnV0dG9uXHJcbi8vICAgJCgnI21vYmlsZS1kYXNoYm9hcmQtZGV0YWlsJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAkKCcuZGFzaGJvYXJkLWluZm8gLm1haW4taW5mbyAudGFibGUtd3JhcHBlcjpudGgtY2hpbGQoMyknKS5jc3MoJ2Rpc3BsYXknLCdibG9jaycpO1xyXG4vLyAgICAgICAkKCcuZGFzaGJvYXJkLWluZm8gLm1haW4taW5mbyAudGFibGUtd3JhcHBlcjpudGgtY2hpbGQoMiknKS5jc3MoJ2Rpc3BsYXknLCdub25lJyk7XHJcbi8vICAgfSk7XHJcblxyXG4vLyBWaXNpYmxlIGNoYW5nZSBwYXNzd29yZFxyXG4kKFwiI2Z1bGwtd2lkdGgtY2hhcnRcIikuY2xpY2soXHJcbiAgICBmdW5jdGlvbigpXHJcbiAgICB7XHJcbiAgICAgICAgc2V0VGltZW91dChcclxuICAgICAgICAgICAgZnVuY3Rpb24oKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZWdlbmRfZHJhdygpO1xyXG4gICAgICAgICAgICB9LDUwMFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbik7XHJcbiQoXCIuY2hhbmdlX3Bhc3MtYnRuXCIpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAkKFwiLnBhc3N3b3JkXCIpLnRvZ2dsZUNsYXNzKCdkLWJsb2NrJyk7XHJcbn0pO1xyXG5cclxuLy8gQ2hhbmdlIGJnIG5lYXIgbG9nbyB3aGVuIGRhc2hib2FyZCBpcyBhY3RpdmVcclxuaWYgKCQoXCIuZGFzaGJvYXJkLWluZm8gLmRhc2hib2FyZF9sZWZ0LWJhciAubmF2IC5saXN0X2l0ZW06bnRoLWNoaWxkKDEpXCIpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgJCgnLmRhc2hib2FyZC1pbmZvIC5kYXNoYm9hcmRfbGVmdC1iYXInKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbn1cclxuXHJcbi8vIFNob3cgaGlkZGVuIHBhc3N3b3JkXHJcbiQoZnVuY3Rpb24oKXtcclxuICAgICQoJy5oaWRlLXNob3cnKS5zaG93KCk7XHJcbiAgICAkKCcuaGlkZS1zaG93IHNwYW4nKS5hZGRDbGFzcygnc2hvdycpO1xyXG5cclxuICAgICQoJy5oaWRlLXNob3cgc3BhbicpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYoICQodGhpcykuaGFzQ2xhc3MoJ3Nob3cnKSApIHtcclxuICAgICAgICAgICAgJCh0aGlzKS50ZXh0KCdIaWRlJyk7XHJcbiAgICAgICAgICAgICQodGhpcykucGFyZW50KCkuc2libGluZ3MoJy5wYXNzd29yZCcpLmF0dHIoJ3R5cGUnLCd0ZXh0Jyk7XHJcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3Nob3cnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKHRoaXMpLnRleHQoJ1Nob3cnKTtcclxuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5zaWJsaW5ncygnLnBhc3N3b3JkJykuYXR0cigndHlwZScsJ3Bhc3N3b3JkJyk7XHJcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ3Nob3cnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcuY2hhbmdlID4gYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJCgnLmhpZGUtc2hvdyBzcGFuJykudGV4dCgnU2hvdycpLmFkZENsYXNzKCdzaG93Jyk7XHJcbiAgICAgICAgJCgnLmhpZGUtc2hvdycpLnBhcmVudCgpLmZpbmQoJy5wYXNzd29yZCcpLmF0dHIoJ3R5cGUnLCdwYXNzd29yZCcpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuLy8gQnV0dG9uIGV4cGFuZCBsb25nIHBhZ2VcclxuJCgnLmJ0bi1jaGFuZ2UtbG9uZy1wYWdlJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnLm1haW4taW5mbycpLnRvZ2dsZUNsYXNzKCdsb25nLXBhZ2UnKTtcclxuICAgICQoJy5kYXNoYm9hcmRfbGVmdC1iYXInKS50b2dnbGVDbGFzcygnbG9uZy1wYWdlJyk7XHJcbiAgICAkKCcjZGFzaGJvYXJkJykudG9nZ2xlQ2xhc3MoJ2xvbmctcGFnZScpO1xyXG4gICAgJCgnI2tleXMnKS50b2dnbGVDbGFzcygnbG9uZy1wYWdlJyk7XHJcbiAgICAkKCcjdXNlcnMnKS50b2dnbGVDbGFzcygnbG9uZy1wYWdlJyk7XHJcbiAgICAkKCcjcGF5bWVudHMnKS50b2dnbGVDbGFzcygnbG9uZy1wYWdlJyk7XHJcbiAgICAkKCcjc2V0dGluZ3MnKS50b2dnbGVDbGFzcygnbG9uZy1wYWdlJyk7XHJcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdjb2xsYXBzZWQnKTtcclxuICAgICQoJyNjaGFydC1mdWxsJykudG9nZ2xlQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgJCgnLm1pbmktY2hhcnQnKS5yZW1vdmVDbGFzcygnZC1ub25lJyk7XHJcbn0pO1xyXG5cclxuLy8gU2hvdyBuYW1lIHdoZW4gaW5wdXQgZm9jdXNcclxudmFyICRpbnB1dCA9ICQoJ2lucHV0W3R5cGU9XCJ0ZXh0XCJdLCBpbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0sIGlucHV0W3R5cGU9XCJlbWFpbFwiXScpO1xyXG5pZiAoJGlucHV0Lmxlbmd0aCAhPSAwKXtcclxuICAgICQodGhpcykuc2libGluZ3MoJ3NwYW4nKS5jc3MoJ2Rpc3BsYXknLCdpbmxpbmUtYmxvY2snKTtcclxufWVsc2V7XHJcbiAgICAkKHRoaXMpLnNpYmxpbmdzKCdzcGFuJykuY3NzKCdkaXNwbGF5Jywnbm9uZScpO1xyXG59XHJcblxyXG5cclxuJGlucHV0LmZvY3VzKGZ1bmN0aW9uKCkge1xyXG4gICAgJCh0aGlzKS5zaWJsaW5ncygnc3BhbicpLmNzcygnZGlzcGxheScsJ2lubGluZS1ibG9jaycpO1xyXG4gICAgJCh0aGlzKS5jc3MoJ3BhZGRpbmcnLCcwIDAgMTBweCAxMHB4Jyk7XHJcbiAgICAkKHRoaXMpLnNpYmxpbmdzKCcuaGlkZS1zaG93JykuY3NzKCd0b3AnLCcyNHB4Jyk7XHJcbiAgICAkKHRoaXMpLnBhcmVudChcIjpiZWZvcmVcIikuY3NzKCd0b3AnLCcyMHB4Jyk7XHJcbn0pO1xyXG4kaW5wdXQuYmx1cihmdW5jdGlvbigpIHtcclxuICAgIGlmKCAkKHRoaXMpLnZhbCgpICkge1xyXG4gICAgICAgICQodGhpcykuc2libGluZ3MoJ3NwYW4nKS5jc3MoJ2Rpc3BsYXknLCdpbmxpbmUtYmxvY2snKTtcclxuICAgICAgICAkKHRoaXMpLmNzcygncGFkZGluZycsJzAgMCAxMHB4IDEwcHgnKTtcclxuICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCcuaGlkZS1zaG93JykuY3NzKCd0b3AnLCcyNHB4Jyk7XHJcbiAgICAgICAgJCh0aGlzKS5wYXJlbnQoXCI6YmVmb3JlXCIpLmNzcygndG9wJywnMjBweCcpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgJCh0aGlzKS5zaWJsaW5ncygnc3BhbicpLmNzcygnZGlzcGxheScsJ25vbmUnKTtcclxuICAgICAgICAkKHRoaXMpLmNzcygncGFkZGluZycsJzE1cHggMTVweCAxNXB4IDEwcHgnKTtcclxuICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCcuaGlkZS1zaG93JykuY3NzKCd0b3AnLCcxNXB4Jyk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8gRGV2ZWxvcGVkIGJ5IG5pa29hbGRyQGdtYWlsLmNvbSAoMjAxOSkiXX0=
